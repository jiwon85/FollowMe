/* Auto-generated by genmsg_cpp for file /home/fri/ros/rosbuild_ws/skeleton_markers/msg/VictimFinder.msg */
#ifndef SKELETON_MARKERS_MESSAGE_VICTIMFINDER_H
#define SKELETON_MARKERS_MESSAGE_VICTIMFINDER_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace skeleton_markers
{
template <class ContainerAllocator>
struct VictimFinder_ {
  typedef VictimFinder_<ContainerAllocator> Type;

  VictimFinder_()
  : hasPrey(false)
  , angle(0.0)
  , distance(0.0)
  {
  }

  VictimFinder_(const ContainerAllocator& _alloc)
  : hasPrey(false)
  , angle(0.0)
  , distance(0.0)
  {
  }

  typedef uint8_t _hasPrey_type;
  uint8_t hasPrey;

  typedef double _angle_type;
  double angle;

  typedef double _distance_type;
  double distance;


  typedef boost::shared_ptr< ::skeleton_markers::VictimFinder_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::skeleton_markers::VictimFinder_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct VictimFinder
typedef  ::skeleton_markers::VictimFinder_<std::allocator<void> > VictimFinder;

typedef boost::shared_ptr< ::skeleton_markers::VictimFinder> VictimFinderPtr;
typedef boost::shared_ptr< ::skeleton_markers::VictimFinder const> VictimFinderConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::skeleton_markers::VictimFinder_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::skeleton_markers::VictimFinder_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace skeleton_markers

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::skeleton_markers::VictimFinder_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::skeleton_markers::VictimFinder_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::skeleton_markers::VictimFinder_<ContainerAllocator> > {
  static const char* value() 
  {
    return "960a9cfc3b72e10516e49f48ac0d1971";
  }

  static const char* value(const  ::skeleton_markers::VictimFinder_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x960a9cfc3b72e105ULL;
  static const uint64_t static_value2 = 0x16e49f48ac0d1971ULL;
};

template<class ContainerAllocator>
struct DataType< ::skeleton_markers::VictimFinder_<ContainerAllocator> > {
  static const char* value() 
  {
    return "skeleton_markers/VictimFinder";
  }

  static const char* value(const  ::skeleton_markers::VictimFinder_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::skeleton_markers::VictimFinder_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bool hasPrey\n\
float64 angle\n\
float64 distance \n\
\n\
";
  }

  static const char* value(const  ::skeleton_markers::VictimFinder_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::skeleton_markers::VictimFinder_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::skeleton_markers::VictimFinder_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.hasPrey);
    stream.next(m.angle);
    stream.next(m.distance);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct VictimFinder_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::skeleton_markers::VictimFinder_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::skeleton_markers::VictimFinder_<ContainerAllocator> & v) 
  {
    s << indent << "hasPrey: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.hasPrey);
    s << indent << "angle: ";
    Printer<double>::stream(s, indent + "  ", v.angle);
    s << indent << "distance: ";
    Printer<double>::stream(s, indent + "  ", v.distance);
  }
};


} // namespace message_operations
} // namespace ros

#endif // SKELETON_MARKERS_MESSAGE_VICTIMFINDER_H

